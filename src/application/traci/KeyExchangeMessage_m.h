//
// Generated file, do not edit! Created by nedtool 5.7 from veins/modules/application/traci/KeyExchangeMessage.msg.
//

#ifndef __VEINS_KEYEXCHANGEMESSAGE_M_H
#define __VEINS_KEYEXCHANGEMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0507
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef VEINS_API
#  if defined(VEINS_EXPORT)
#    define VEINS_API  OPP_DLLEXPORT
#  elif defined(VEINS_IMPORT)
#    define VEINS_API  OPP_DLLIMPORT
#  else
#    define VEINS_API
#  endif
#endif


namespace veins {

class KeyExchangeMessage;
} // namespace veins

#include "veins/base/utils/Coord_m.h" // import veins.base.utils.Coord

#include "veins/modules/messages/BaseFrame1609_4_m.h" // import veins.modules.messages.BaseFrame1609_4

#include "veins/base/utils/SimpleAddress_m.h" // import veins.base.utils.SimpleAddress


namespace veins {

/**
 * Class generated from <tt>veins/modules/application/traci/KeyExchangeMessage.msg:21</tt> by nedtool.
 * <pre>
 * packet KeyExchangeMessage extends BaseFrame1609_4
 * {
 *     int vehicleId; // 车辆标识
 *     int rsuId; // 中心服务点标识
 *     simtime_t timestamp; // 时间戳
 *     string mydata; // 载荷
 *     string hashValue; // 哈希值
 * 
 * }
 * </pre>
 */
class VEINS_API KeyExchangeMessage : public ::veins::BaseFrame1609_4
{
  protected:
    int vehicleId = 0;
    int rsuId = 0;
    omnetpp::simtime_t timestamp = SIMTIME_ZERO;
    omnetpp::opp_string mydata;
    omnetpp::opp_string hashValue;

  private:
    void copy(const KeyExchangeMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const KeyExchangeMessage&);

  public:
    KeyExchangeMessage(const char *name=nullptr, short kind=0);
    KeyExchangeMessage(const KeyExchangeMessage& other);
    virtual ~KeyExchangeMessage();
    KeyExchangeMessage& operator=(const KeyExchangeMessage& other);
    virtual KeyExchangeMessage *dup() const override {return new KeyExchangeMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getVehicleId() const;
    virtual void setVehicleId(int vehicleId);
    virtual int getRsuId() const;
    virtual void setRsuId(int rsuId);
    virtual omnetpp::simtime_t getTimestamp() const;
    virtual void setTimestamp(omnetpp::simtime_t timestamp);
    virtual const char * getMydata() const;
    virtual void setMydata(const char * mydata);
    virtual const char * getHashValue() const;
    virtual void setHashValue(const char * hashValue);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const KeyExchangeMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, KeyExchangeMessage& obj) {obj.parsimUnpack(b);}

} // namespace veins

#endif // ifndef __VEINS_KEYEXCHANGEMESSAGE_M_H

