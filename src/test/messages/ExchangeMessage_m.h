//
// Generated file, do not edit! Created by nedtool 5.7 from veins/test/messages/ExchangeMessage.msg.
//

#ifndef __VEINS_EXCHANGEMESSAGE_M_H
#define __VEINS_EXCHANGEMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0507
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef VEINS_API
#  if defined(VEINS_EXPORT)
#    define VEINS_API  OPP_DLLEXPORT
#  elif defined(VEINS_IMPORT)
#    define VEINS_API  OPP_DLLIMPORT
#  else
#    define VEINS_API
#  endif
#endif


namespace veins {

class M1Message;
class M2Message;
class IDBroad;
} // namespace veins

#include "veins/base/utils/Coord_m.h" // import veins.base.utils.Coord

#include "veins/modules/messages/BaseFrame1609_4_m.h" // import veins.modules.messages.BaseFrame1609_4

#include "veins/base/utils/SimpleAddress_m.h" // import veins.base.utils.SimpleAddress


namespace veins {

/**
 * Class generated from <tt>veins/test/messages/ExchangeMessage.msg:21</tt> by nedtool.
 * <pre>
 * packet M1Message extends BaseFrame1609_4
 * {
 *     int VID;        // 车辆ID
 *     int ri;           // 随机数 r_i
 *     int W1;         // W1 值
 *     int W2;
 *     int sd;      // W2 值
 *     simtime_t T1;      // 时间戳 T1
 * }
 * </pre>
 */
class VEINS_API M1Message : public ::veins::BaseFrame1609_4
{
  protected:
    int VID = 0;
    int ri = 0;
    int W1 = 0;
    int W2 = 0;
    int sd = 0;
    omnetpp::simtime_t T1 = SIMTIME_ZERO;

  private:
    void copy(const M1Message& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const M1Message&);

  public:
    M1Message(const char *name=nullptr, short kind=0);
    M1Message(const M1Message& other);
    virtual ~M1Message();
    M1Message& operator=(const M1Message& other);
    virtual M1Message *dup() const override {return new M1Message(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getVID() const;
    virtual void setVID(int VID);
    virtual int getRi() const;
    virtual void setRi(int ri);
    virtual int getW1() const;
    virtual void setW1(int W1);
    virtual int getW2() const;
    virtual void setW2(int W2);
    virtual int getSd() const;
    virtual void setSd(int sd);
    virtual omnetpp::simtime_t getT1() const;
    virtual void setT1(omnetpp::simtime_t T1);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const M1Message& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, M1Message& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>veins/test/messages/ExchangeMessage.msg:30</tt> by nedtool.
 * <pre>
 * packet M2Message extends BaseFrame1609_4
 * {
 *     int RID;       // RSU ID
 *     int rj;           // 随机数 r_j
 *     int W3;
 *     int sd;      // W3 值
 *     simtime_t T2;      // 时间戳 T2
 * }
 * </pre>
 */
class VEINS_API M2Message : public ::veins::BaseFrame1609_4
{
  protected:
    int RID = 0;
    int rj = 0;
    int W3 = 0;
    int sd = 0;
    omnetpp::simtime_t T2 = SIMTIME_ZERO;

  private:
    void copy(const M2Message& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const M2Message&);

  public:
    M2Message(const char *name=nullptr, short kind=0);
    M2Message(const M2Message& other);
    virtual ~M2Message();
    M2Message& operator=(const M2Message& other);
    virtual M2Message *dup() const override {return new M2Message(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getRID() const;
    virtual void setRID(int RID);
    virtual int getRj() const;
    virtual void setRj(int rj);
    virtual int getW3() const;
    virtual void setW3(int W3);
    virtual int getSd() const;
    virtual void setSd(int sd);
    virtual omnetpp::simtime_t getT2() const;
    virtual void setT2(omnetpp::simtime_t T2);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const M2Message& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, M2Message& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>veins/test/messages/ExchangeMessage.msg:38</tt> by nedtool.
 * <pre>
 * packet IDBroad extends BaseFrame1609_4
 * {
 *     int R;       // RSU ID
 *     string Name = "IDBroadcast";
 * 
 * }
 * </pre>
 */
class VEINS_API IDBroad : public ::veins::BaseFrame1609_4
{
  protected:
    int R = 0;
    omnetpp::opp_string Name = "IDBroadcast";

  private:
    void copy(const IDBroad& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const IDBroad&);

  public:
    IDBroad(const char *name=nullptr, short kind=0);
    IDBroad(const IDBroad& other);
    virtual ~IDBroad();
    IDBroad& operator=(const IDBroad& other);
    virtual IDBroad *dup() const override {return new IDBroad(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getR() const;
    virtual void setR(int R);
    virtual const char * getName() const;
    virtual void setName(const char * Name);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const IDBroad& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, IDBroad& obj) {obj.parsimUnpack(b);}

} // namespace veins

#endif // ifndef __VEINS_EXCHANGEMESSAGE_M_H

