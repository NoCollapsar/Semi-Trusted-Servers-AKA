//
// Generated file, do not edit! Created by nedtool 5.7 from veins/test/messages/Xie.msg.
//

#ifndef __VEINS_XIE_M_H
#define __VEINS_XIE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0507
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef VEINS_API
#  if defined(VEINS_EXPORT)
#    define VEINS_API  OPP_DLLEXPORT
#  elif defined(VEINS_IMPORT)
#    define VEINS_API  OPP_DLLIMPORT
#  else
#    define VEINS_API
#  endif
#endif


namespace veins {

class VMessage;
class RMessage;
class RBroad;
} // namespace veins

#include "veins/base/utils/Coord_m.h" // import veins.base.utils.Coord

#include "veins/modules/messages/BaseFrame1609_4_m.h" // import veins.modules.messages.BaseFrame1609_4

#include "veins/base/utils/SimpleAddress_m.h" // import veins.base.utils.SimpleAddress


namespace veins {

/**
 * Class generated from <tt>veins/test/messages/Xie.msg:21</tt> by nedtool.
 * <pre>
 * packet VMessage extends BaseFrame1609_4
 * {
 *     int Dvi;        // 车辆ID
 *     int Cvi1;
 *     int Cvi2;
 *     int Cvi3;
 *     simtime_t T1;      // 时间戳 T1
 * }
 * </pre>
 */
class VEINS_API VMessage : public ::veins::BaseFrame1609_4
{
  protected:
    int Dvi = 0;
    int Cvi1 = 0;
    int Cvi2 = 0;
    int Cvi3 = 0;
    omnetpp::simtime_t T1 = SIMTIME_ZERO;

  private:
    void copy(const VMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const VMessage&);

  public:
    VMessage(const char *name=nullptr, short kind=0);
    VMessage(const VMessage& other);
    virtual ~VMessage();
    VMessage& operator=(const VMessage& other);
    virtual VMessage *dup() const override {return new VMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getDvi() const;
    virtual void setDvi(int Dvi);
    virtual int getCvi1() const;
    virtual void setCvi1(int Cvi1);
    virtual int getCvi2() const;
    virtual void setCvi2(int Cvi2);
    virtual int getCvi3() const;
    virtual void setCvi3(int Cvi3);
    virtual omnetpp::simtime_t getT1() const;
    virtual void setT1(omnetpp::simtime_t T1);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>veins/test/messages/Xie.msg:29</tt> by nedtool.
 * <pre>
 * packet RMessage extends BaseFrame1609_4
 * {
 *     int TVNi;
 *     int IDRi;     // RSU ID
 *     int CRi1;
 *     int Rvi;
 *     simtime_t T2;      // 时间戳 T2
 * }
 * </pre>
 */
class VEINS_API RMessage : public ::veins::BaseFrame1609_4
{
  protected:
    int TVNi = 0;
    int IDRi = 0;
    int CRi1 = 0;
    int Rvi = 0;
    omnetpp::simtime_t T2 = SIMTIME_ZERO;

  private:
    void copy(const RMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RMessage&);

  public:
    RMessage(const char *name=nullptr, short kind=0);
    RMessage(const RMessage& other);
    virtual ~RMessage();
    RMessage& operator=(const RMessage& other);
    virtual RMessage *dup() const override {return new RMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getTVNi() const;
    virtual void setTVNi(int TVNi);
    virtual int getIDRi() const;
    virtual void setIDRi(int IDRi);
    virtual int getCRi1() const;
    virtual void setCRi1(int CRi1);
    virtual int getRvi() const;
    virtual void setRvi(int Rvi);
    virtual omnetpp::simtime_t getT2() const;
    virtual void setT2(omnetpp::simtime_t T2);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>veins/test/messages/Xie.msg:37</tt> by nedtool.
 * <pre>
 * packet RBroad extends BaseFrame1609_4
 * {
 *     int IDRi;       // RSU ID
 *     int XRi;
 *     int CRi;
 *     int ARi;
 * 
 * 
 * }
 * </pre>
 */
class VEINS_API RBroad : public ::veins::BaseFrame1609_4
{
  protected:
    int IDRi = 0;
    int XRi = 0;
    int CRi = 0;
    int ARi = 0;

  private:
    void copy(const RBroad& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RBroad&);

  public:
    RBroad(const char *name=nullptr, short kind=0);
    RBroad(const RBroad& other);
    virtual ~RBroad();
    RBroad& operator=(const RBroad& other);
    virtual RBroad *dup() const override {return new RBroad(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getIDRi() const;
    virtual void setIDRi(int IDRi);
    virtual int getXRi() const;
    virtual void setXRi(int XRi);
    virtual int getCRi() const;
    virtual void setCRi(int CRi);
    virtual int getARi() const;
    virtual void setARi(int ARi);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RBroad& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RBroad& obj) {obj.parsimUnpack(b);}

} // namespace veins

#endif // ifndef __VEINS_XIE_M_H

