//
// Generated file, do not edit! Created by nedtool 5.7 from veins/test/messages/Xiedmsg.msg.
//

#ifndef __VEINS_XIEDMSG_M_H
#define __VEINS_XIEDMSG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0507
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef VEINS_API
#  if defined(VEINS_EXPORT)
#    define VEINS_API  OPP_DLLEXPORT
#  elif defined(VEINS_IMPORT)
#    define VEINS_API  OPP_DLLIMPORT
#  else
#    define VEINS_API
#  endif
#endif


namespace veins {

class XiedVmsg;
class XiedRMsg;
class XiedIDBroad;
} // namespace veins

#include "veins/base/utils/Coord_m.h" // import veins.base.utils.Coord

#include "veins/modules/messages/BaseFrame1609_4_m.h" // import veins.modules.messages.BaseFrame1609_4

#include "veins/base/utils/SimpleAddress_m.h" // import veins.base.utils.SimpleAddress


namespace veins {

/**
 * Class generated from <tt>veins/test/messages/Xiedmsg.msg:21</tt> by nedtool.
 * <pre>
 * packet XiedVmsg extends BaseFrame1609_4
 * {
 *     int SHIDTE;        // 车辆ID
 *     int M1;
 *     int M2;
 *     int AUTE;
 *     simtime_t T1;      // 时间戳 T1
 * }
 * </pre>
 */
class VEINS_API XiedVmsg : public ::veins::BaseFrame1609_4
{
  protected:
    int SHIDTE = 0;
    int M1 = 0;
    int M2 = 0;
    int AUTE = 0;
    omnetpp::simtime_t T1 = SIMTIME_ZERO;

  private:
    void copy(const XiedVmsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const XiedVmsg&);

  public:
    XiedVmsg(const char *name=nullptr, short kind=0);
    XiedVmsg(const XiedVmsg& other);
    virtual ~XiedVmsg();
    XiedVmsg& operator=(const XiedVmsg& other);
    virtual XiedVmsg *dup() const override {return new XiedVmsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getSHIDTE() const;
    virtual void setSHIDTE(int SHIDTE);
    virtual int getM1() const;
    virtual void setM1(int M1);
    virtual int getM2() const;
    virtual void setM2(int M2);
    virtual int getAUTE() const;
    virtual void setAUTE(int AUTE);
    virtual omnetpp::simtime_t getT1() const;
    virtual void setT1(omnetpp::simtime_t T1);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const XiedVmsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, XiedVmsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>veins/test/messages/Xiedmsg.msg:29</tt> by nedtool.
 * <pre>
 * packet XiedRMsg extends BaseFrame1609_4
 * {
 *     int M6;
 *     int IDCS;
 *     int AUS;
 *     simtime_t T3;      // 时间戳 T3
 * }
 * </pre>
 */
class VEINS_API XiedRMsg : public ::veins::BaseFrame1609_4
{
  protected:
    int M6 = 0;
    int IDCS = 0;
    int AUS = 0;
    omnetpp::simtime_t T3 = SIMTIME_ZERO;

  private:
    void copy(const XiedRMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const XiedRMsg&);

  public:
    XiedRMsg(const char *name=nullptr, short kind=0);
    XiedRMsg(const XiedRMsg& other);
    virtual ~XiedRMsg();
    XiedRMsg& operator=(const XiedRMsg& other);
    virtual XiedRMsg *dup() const override {return new XiedRMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getM6() const;
    virtual void setM6(int M6);
    virtual int getIDCS() const;
    virtual void setIDCS(int IDCS);
    virtual int getAUS() const;
    virtual void setAUS(int AUS);
    virtual omnetpp::simtime_t getT3() const;
    virtual void setT3(omnetpp::simtime_t T3);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const XiedRMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, XiedRMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>veins/test/messages/Xiedmsg.msg:36</tt> by nedtool.
 * <pre>
 * packet XiedIDBroad extends BaseFrame1609_4
 * {
 *     int R;       // RSU ID
 *     string Name = "IDBroadcast";
 * 
 * }
 * </pre>
 */
class VEINS_API XiedIDBroad : public ::veins::BaseFrame1609_4
{
  protected:
    int R = 0;
    omnetpp::opp_string Name = "IDBroadcast";

  private:
    void copy(const XiedIDBroad& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const XiedIDBroad&);

  public:
    XiedIDBroad(const char *name=nullptr, short kind=0);
    XiedIDBroad(const XiedIDBroad& other);
    virtual ~XiedIDBroad();
    XiedIDBroad& operator=(const XiedIDBroad& other);
    virtual XiedIDBroad *dup() const override {return new XiedIDBroad(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getR() const;
    virtual void setR(int R);
    virtual const char * getName() const;
    virtual void setName(const char * Name);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const XiedIDBroad& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, XiedIDBroad& obj) {obj.parsimUnpack(b);}

} // namespace veins

#endif // ifndef __VEINS_XIEDMSG_M_H

