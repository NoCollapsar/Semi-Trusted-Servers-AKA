//
// Generated file, do not edit! Created by nedtool 5.7 from veins/test/messages/VfasMsg.msg.
//

#ifndef __VEINS_VFASMSG_M_H
#define __VEINS_VFASMSG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0507
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef VEINS_API
#  if defined(VEINS_EXPORT)
#    define VEINS_API  OPP_DLLEXPORT
#  elif defined(VEINS_IMPORT)
#    define VEINS_API  OPP_DLLIMPORT
#  else
#    define VEINS_API
#  endif
#endif


namespace veins {

class VfasVmsg;
class VfasRMsg;
} // namespace veins

#include "veins/base/utils/Coord_m.h" // import veins.base.utils.Coord

#include "veins/modules/messages/BaseFrame1609_4_m.h" // import veins.modules.messages.BaseFrame1609_4

#include "veins/base/utils/SimpleAddress_m.h" // import veins.base.utils.SimpleAddress


namespace veins {

/**
 * Class generated from <tt>veins/test/messages/VfasMsg.msg:21</tt> by nedtool.
 * <pre>
 * packet VfasVmsg extends BaseFrame1609_4
 * {
 *     int PIDi;        // 车辆ID
 *     int Xi;
 *     int Ai;
 *     int Bi;
 *     int Ci1;
 *     simtime_t T1;      // 时间戳 T1
 * }
 * </pre>
 */
class VEINS_API VfasVmsg : public ::veins::BaseFrame1609_4
{
  protected:
    int PIDi = 0;
    int Xi = 0;
    int Ai = 0;
    int Bi = 0;
    int Ci1 = 0;
    omnetpp::simtime_t T1 = SIMTIME_ZERO;

  private:
    void copy(const VfasVmsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const VfasVmsg&);

  public:
    VfasVmsg(const char *name=nullptr, short kind=0);
    VfasVmsg(const VfasVmsg& other);
    virtual ~VfasVmsg();
    VfasVmsg& operator=(const VfasVmsg& other);
    virtual VfasVmsg *dup() const override {return new VfasVmsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getPIDi() const;
    virtual void setPIDi(int PIDi);
    virtual int getXi() const;
    virtual void setXi(int Xi);
    virtual int getAi() const;
    virtual void setAi(int Ai);
    virtual int getBi() const;
    virtual void setBi(int Bi);
    virtual int getCi1() const;
    virtual void setCi1(int Ci1);
    virtual omnetpp::simtime_t getT1() const;
    virtual void setT1(omnetpp::simtime_t T1);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VfasVmsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VfasVmsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>veins/test/messages/VfasMsg.msg:30</tt> by nedtool.
 * <pre>
 * packet VfasRMsg extends BaseFrame1609_4
 * {
 *     int IDfj;
 *     int PIDi;
 *     int Yj;
 *     int Dj;
 *     int Cj1;
 *     simtime_t Tj1;      // 时间戳 T
 * }
 * </pre>
 */
class VEINS_API VfasRMsg : public ::veins::BaseFrame1609_4
{
  protected:
    int IDfj = 0;
    int PIDi = 0;
    int Yj = 0;
    int Dj = 0;
    int Cj1 = 0;
    omnetpp::simtime_t Tj1 = SIMTIME_ZERO;

  private:
    void copy(const VfasRMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const VfasRMsg&);

  public:
    VfasRMsg(const char *name=nullptr, short kind=0);
    VfasRMsg(const VfasRMsg& other);
    virtual ~VfasRMsg();
    VfasRMsg& operator=(const VfasRMsg& other);
    virtual VfasRMsg *dup() const override {return new VfasRMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getIDfj() const;
    virtual void setIDfj(int IDfj);
    virtual int getPIDi() const;
    virtual void setPIDi(int PIDi);
    virtual int getYj() const;
    virtual void setYj(int Yj);
    virtual int getDj() const;
    virtual void setDj(int Dj);
    virtual int getCj1() const;
    virtual void setCj1(int Cj1);
    virtual omnetpp::simtime_t getTj1() const;
    virtual void setTj1(omnetpp::simtime_t Tj1);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VfasRMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VfasRMsg& obj) {obj.parsimUnpack(b);}

} // namespace veins

#endif // ifndef __VEINS_VFASMSG_M_H

